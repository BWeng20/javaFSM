package com.bw.fsm.executableContent;

import com.bw.fsm.Event;
import com.bw.fsm.EventType;
import com.bw.fsm.ExecutableContent;
import com.bw.fsm.Fsm;
import com.bw.fsm.datamodel.Datamodel;

import java.util.Map;

/**
 * <b>W3C says</b>:<br>
 * The &lt;raise> element raises an event in the current SCXML session.<br>
 * Note that the event will not be processed until the current block of executable content has completed
 * and all events that are already in the internal event queue have been processed. For example, suppose
 * the &lt;raise> element occurs first in the &lt;onentry> handler of state S followed by executable content
 * elements ec1 and ec2. If event e1 is already in the internal event queue when S is entered, the event
 * generated by &lt;raise> will not be processed until ec1 and ec2 have finished execution and e1 has been
 * processed.
 */
public class Raise implements ExecutableContent {
    public String event = "";

    @Override
    public String toString() {
        return String.format("Raise {event %s}", event);
    }

    @Override
    public boolean execute(Datamodel datamodel, Fsm fsm) {
        Event event = new Event("", this.event, null, null, EventType.internal);
        datamodel.global().enqueue_internal(event);
        return true;
    }

    @Override
    public int get_type() {
        return TYPE_RAISE;
    }

    @Override
    public Map<String, Object> get_trace() {
        return Map.of("event", this.event);
    }
}
