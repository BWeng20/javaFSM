package com.bw.fsm.expressionEngine;

import com.bw.fsm.Data;

/**
 * Token variants, generated by Lexer.
 */
public abstract class Token<T> {

    public final TokenType type;
    public final T value;

    protected Token(TokenType type, T value) {
        this.type = type;
        this.value = value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }


    public abstract Data as_data();

    /// Some constant number. Integer or double.
    public static abstract class NumericToken<V extends Number> extends Token<V> {

        private NumericToken(V value) {
            super(TokenType.Number, value);
        }

        public double as_double() {
            return this.value.doubleValue();
        }

    }

    public static class Integer extends NumericToken<java.lang.Integer> {

        public Integer(int value) {
            super(value);
        }

        @Override
        public Data as_data() {
            return new Data.Integer(value);
        }

    }

    public static class Double extends NumericToken<java.lang.Double> {

        public Double(double value) {
            super(value);
        }

        @Override
        public Data as_data() {
            return new Data.Double(value);
        }
    }

    /**
     * An identifier
     */
    public static class Identifier extends Token<java.lang.String> {

        public Identifier(java.lang.String value) {
            super(TokenType.Identifier, value);
        }

        @Override
        public Data as_data() {
            return new Data.Source(value);
        }

    }

    /**
     * A constant string expression
     */
    public static class TString extends Token<java.lang.String> {

        public TString(java.lang.String value) {
            super(TokenType.TString, value);
        }

        @Override
        public Data as_data() {
            return new Data.String(value);
        }

    }

    /**
     * A constant boolean expression.
     */
    public static class Boolean extends Token<java.lang.Boolean> {

        public Boolean(java.lang.Boolean value) {
            super(TokenType.Boolean, value);
        }

        @Override
        public Data as_data() {
            return Data.Boolean.fromBoolean(value);
        }
    }

    /**
     * Some operator
     */
    public static class Operator extends Token<com.bw.fsm.expressionEngine.Operator> {

        public Operator(com.bw.fsm.expressionEngine.Operator value) {
            super(TokenType.Operator, value);
        }

        @Override
        public Data as_data() {
            return new Data.Source(value.toString());
        }

    }

    /**
     * Some bracket
     */
    public static class Bracket extends Token<Character> {

        public Bracket(Character value) {
            super(TokenType.Bracket, value);
        }

        @Override
        public Data as_data() {
            return new Data.Source(value.toString());
        }
    }

    /**
     * A - none whitespace, none bracket - separator
     */
    public static class Separator extends Token<Character> {

        public Separator(Character value) {
            super(TokenType.Separator, value);
        }

        @Override
        public Data as_data() {
            return new Data.Source(value.toString());
        }
    }

    /**
     * The expression separator to join multiple expressions.
     */
    public static class ExpressionSeparator extends Token<Object> {

        private ExpressionSeparator() {
            super(TokenType.ExpressionSeparator, null);
        }

        public final static ExpressionSeparator INSTANCE = new ExpressionSeparator();

        @Override
        public Data as_data() {
            return new Data.Source(";");
        }

    }

    /**
     * a Null value
     */
    public static class Null extends Token<Object> {

        private Null() {
            super(TokenType.Null, null);
        }

        public final static Null INSTANCE = new Null();

        @Override
        public Data as_data() {
            return Data.Null.NULL;
        }
    }

    /**
     * Indicates the end of the expression.
     */
    public static class EOE extends Token<Object> {

        private EOE() {
            super(TokenType.EOE, null);
        }

        public final static EOE INSTANCE = new EOE();

        @Override
        public Data as_data() {
            // TODO: ?
            return Data.None.NONE;
        }

    }
}
